[
    {
        "id": "9206241c.eddcf8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2d49513f.291dfe",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.neslab.it",
        "port": "3200",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "4c59f7b1.f86108",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.neslab.it",
        "port": "3200",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "d908a765.f7df18",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.neslab.it",
        "port": "3200",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "ed7e0abe.d2a398",
        "type": "inject",
        "z": "9206241c.eddcf8",
        "name": "Simulate createGroups",
        "topic": "Project1/createGroup",
        "payload": "Hello World",
        "payloadType": "str",
        "repeat": "36000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "e286fe6.fcbbf",
                "62cf2cf2.4c5824",
                "6d1b8caa.ca8ce4"
            ]
        ]
    },
    {
        "id": "ec997801.3828a8",
        "type": "mqtt in",
        "z": "9206241c.eddcf8",
        "name": "Project1/createGroup",
        "topic": "nsds2023/search",
        "qos": "1",
        "datatype": "auto",
        "broker": "2d49513f.291dfe",
        "x": 260,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "828711f8.9452b",
        "type": "file",
        "z": "9206241c.eddcf8",
        "name": "writeToCsv",
        "filename": "/data/output.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 910,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e286fe6.fcbbf",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "simulateMQTT1",
        "func": "// FIRST GROUP\n// var simulate = [\n//     { teamLeaderIP: \"200:54:32\", listofIPs: \"200:54:32,200:85:33,200:77:90\", cardinality: 3 }\n// ]\n\n// SECOND GROUP\nvar simulate = [\n    { teamLeaderIP: \"200:43:32\", listofIPs: \"200:43:32,200:11:85,200:79:15\", cardinality: 3 }\n]\n\nvar simulateString = JSON.stringify(simulate);\nvar timestampString = new Date().toISOString();\nvar combinedString = simulateString + timestampString;\n\nmsg.payload = combinedString;\n\nvar timestamp = new Date();\n\nvar payloadObj = {\n    teamLeaderIP: simulate[0].teamLeaderIP,\n    timestamp: timestamp.toISOString(),\n    members: simulate[0].listofIPs.split(\",\"),\n    cardinality: simulate[0].cardinality\n};\n\nmsg.payload = JSON.stringify(payloadObj);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 180,
        "wires": [
            [
                "aef7ae8b.637dd"
            ]
        ]
    },
    {
        "id": "aef7ae8b.637dd",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "convertToJSObject",
        "func": "var inputString = msg.payload;\n\n// Parse the string to convert it to a JavaScript object\nvar parsedObject = JSON.parse(inputString);\n\n// Now, parsedObject contains the JavaScript object\nmsg.payload = parsedObject;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 180,
        "wires": [
            [
                "9a487c7e.deb57",
                "9a40dd9b.3bdff"
            ]
        ]
    },
    {
        "id": "9a40dd9b.3bdff",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "Print",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "493c35ea.ffaabc",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "prepareNewCsvLine",
        "func": "// Extract data from msg.payload\nconst newGroup = msg.payload[0];\nconst people = msg.payload[1];\nconst groups = msg.payload[2];\n\nlet newGroupID = 0;\nif (groups.length != 0) {\n    for (let i = 0; i < groups.length; i++) {\n    if (groups[i].groupID > newGroupID) {\n        newGroupID = groups[i].groupID;\n    }\n}\nnewGroupID = newGroupID + 1\n}\n\nconst newGroupMembers = newGroup.members;\nconst columnHeaders = \"groupID,teamLeader,listOfPeople,nationality,age,dateJoined,dateEnded,lifetime,currentCardinality,minCardinality,maxCardinality,averageCardinality,nChangeCardinality\";\n\nconst matchingPeople = [];\nconst missingIPs = [];\nconst nationalities = [];\nconst ages = [];\nfor (const ip of newGroupMembers) {\n    const matchingPerson = people.find(person => person.IP === ip);\n    if (matchingPerson) {\n        matchingPeople.push(matchingPerson);\n        nationalities.push(matchingPerson.nationality);\n        ages.push(matchingPerson.age);\n    } else {\n        missingIPs.push(ip);\n    }\n}\n\nif (missingIPs.length > 0) {\n    // One or more IPs not found in database\n    msg.payload = \"One or more IPs not found in database: \" + missingIPs.join(', ');\n    return [msg, null];\n}\n\nconst teamLeader = newGroup.teamLeaderIP;\nconst dateJoined = newGroup.timestamp || new Date().toISOString();\nconst dateEnded = 'null';\nconst lifetime = 0;\nconst currentCardinality = newGroup.cardinality;\nconst minCardinality = newGroup.cardinality;\nconst maxCardinality = newGroup.cardinality;\nconst averageCardinality = newGroup.cardinality;\nconst nChangeCardinality = 1;\n\nconst nationalityList = nationalities.join(',');\nconst ageList = ages.join(',');\n\nconst csvRow = `${newGroupID},${teamLeader},\"${newGroupMembers.join(',')}\",\"${nationalityList}\",\"${ageList}\",${dateJoined},${dateEnded},${lifetime},${currentCardinality},${minCardinality},${maxCardinality},${averageCardinality},${nChangeCardinality}`;\n\nmsg.payload = csvRow;\n\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 640,
        "y": 280,
        "wires": [
            [
                "4b76a48f.808cec"
            ],
            [
                "828711f8.9452b",
                "795bcec2.d92cf"
            ]
        ]
    },
    {
        "id": "c3a248fd.1716d8",
        "type": "file in",
        "z": "9206241c.eddcf8",
        "name": "Read Groups",
        "filename": "/data/output.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 230,
        "y": 520,
        "wires": [
            [
                "1ee14a63.11e396"
            ]
        ]
    },
    {
        "id": "1ee14a63.11e396",
        "type": "csv",
        "z": "9206241c.eddcf8",
        "name": "read",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "groupID,teamLeader,listOfPeople,nationality,age,dateJoined,dateEnded,lifetime,currentCardinality,minCardinality,maxCardinality,averageCardinality,nChangeCardinality",
        "skip": "0",
        "strings": false,
        "x": 410,
        "y": 520,
        "wires": [
            [
                "d1bf3d7b.c7089"
            ]
        ]
    },
    {
        "id": "3d2f9202.f755ee",
        "type": "inject",
        "z": "9206241c.eddcf8",
        "name": "Simulate changeCardinality",
        "topic": "Project1/changeCardinality",
        "payload": "Hello World",
        "payloadType": "str",
        "repeat": "36000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "5e7b08c1.0dc0a8",
                "c3a248fd.1716d8",
                "9e44d79.c1dab28"
            ]
        ]
    },
    {
        "id": "5e7b08c1.0dc0a8",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "simulateMQTT",
        "func": "// GROUP GROWS\nvar simulate = [\n    { teamLeaderIP: \"200:54:32\", listofIPs: \"200:54:32,200:85:33,200:77:90,200:21:75\", cardinality: 4 }\n]\n\n// GROUP DIES\n// var simulate = [\n//     { teamLeaderIP: \"200:43:32\", listofIPs: \"200:43:32,200:11:85\", cardinality: 2 }\n// ]\n\nvar simulateString = JSON.stringify(simulate);\nvar timestampString = new Date().toISOString();\nvar combinedString = simulateString + timestampString;\n\nmsg.payload = combinedString;\n\nvar timestamp = new Date();\n\nvar payloadObj = {\n    groupID: simulate[0].teamLeaderIP,\n    timestamp: timestamp.toISOString(),\n    members: simulate[0].listofIPs.split(\",\"),\n    cardinality: simulate[0].cardinality\n};\n\nmsg.payload = JSON.stringify(payloadObj);\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 480,
        "wires": [
            [
                "8f676722.f56c18"
            ]
        ]
    },
    {
        "id": "8f676722.f56c18",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "convertToJSObject",
        "func": "var inputString = msg.payload;\n\n// Parse the string to convert it to a JavaScript object\nvar parsedObject = JSON.parse(inputString);\n\n// Now, parsedObject contains the JavaScript object\nmsg.payload = parsedObject;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "d1bf3d7b.c7089"
            ]
        ]
    },
    {
        "id": "d1bf3d7b.c7089",
        "type": "join",
        "z": "9206241c.eddcf8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "e2adb1f3.a7b63"
            ]
        ]
    },
    {
        "id": "795bcec2.d92cf",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printNewCsvLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 260,
        "wires": []
    },
    {
        "id": "d91a9d47.e1642",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "prepareNewCsvLine",
        "func": "// Extract data from msg.payload\nconst newLine = msg.payload[0];\nconst oldLines = msg.payload[1];\nconst people = msg.payload[2];\n\n// Extract groupID from the newLine object\nconst newGroupID = newLine.groupID;\n\nconst columnHeaders = \"groupID,teamLeader,listOfPeople,nationality,age,dateJoined,dateEnded,lifetime,currentCardinality,minCardinality,maxCardinality,averageCardinality,nChangeCardinality\";\n\n// Initialize an array to store all CSV rows\nconst allCsvRows = [];\nallCsvRows.push(columnHeaders);\n\nlet matchFound = false;\nlet matchingIndex = -1;\n\n// Find the row in the CSV that matches teamLeader with groupID and has dateEnded == null\nfor (let i = 0; i < oldLines.length; i++) {\n    if (oldLines[i].teamLeader === newGroupID && oldLines[i].dateEnded === 'null') {\n        matchingIndex = i;\n        matchFound = true;\n        break;\n    }\n}\n\nif (!matchFound) {\n    // No matching groupID found\n    msg.payload = \"Error: No matching team leader found\"\n    return [msg, null];\n}\n\n\nfor (let i = 0; i < oldLines.length; i++) {\n    \n    // Update csv line\n    if (i === matchingIndex) {\n\n        const { teamLeader, members, cardinality } = newLine;\n        const { groupID, listOfPeople, nationality, age, dateJoined, dateEnded, lifetime, currentCardinality, minCardinality, maxCardinality, averageCardinality, nChangeCardinality } = oldLines[i];\n\n        // find new member\n        const listOfPeopleArray = listOfPeople.split(',');\n        const newMember = members.find(member => !listOfPeopleArray.includes(member));\n        \n        // match it with people dataset\n        const matchingPerson = people.find(person => person.IP === newMember);\n        const newMemberNationality = matchingPerson ? matchingPerson.nationality : '';\n        const newMemberAge = matchingPerson ? matchingPerson.age : '';\n        \n        const newListOfPeople = listOfPeople ? `${listOfPeople},${newMember}` : newMember;\n        const newNationality = nationality ? `${nationality},${newMemberNationality}` : newMemberNationality;\n        const newAge = age ? `${age},${newMemberAge}` : newMemberAge;\n        \n\n        let newMinCardinality = parseInt(minCardinality);\n        let newMaxCardinality = parseInt(maxCardinality);\n\n        if (parseInt(cardinality) < newMinCardinality || isNaN(newMinCardinality)) {\n            newMinCardinality = parseInt(cardinality);\n        }\n        if (parseInt(cardinality) > newMaxCardinality || isNaN(newMaxCardinality)) {\n            newMaxCardinality = parseInt(cardinality);\n        }\n\n        const newNChangeCardinality = parseInt(nChangeCardinality) + 1;\n        const newAverageCardinality = (((parseFloat(averageCardinality) * parseInt(nChangeCardinality)) + parseInt(cardinality)) / newNChangeCardinality).toFixed(2);\n        const newCurrentCardinality = parseInt(currentCardinality) + 1;\n\n        const timestampDate = new Date();\n        const dateJoinedDate = new Date(dateJoined);\n        const differenceInSeconds = (timestampDate - dateJoinedDate) / 1000;\n        const lifetimeSeconds = parseFloat(lifetime) + differenceInSeconds;\n\n        // Construct the modified CSV row\n        const modifiedCsvRow = `${groupID},${oldLines[i].teamLeader},\"${newListOfPeople}\",\"${newNationality}\",\"${newAge}\",\"${dateJoined}\",\"${dateEnded}\",${lifetimeSeconds},${newCurrentCardinality},${newMinCardinality},${newMaxCardinality},${newAverageCardinality},${newNChangeCardinality}`;\n        \n        // Push the modified CSV row to the array\n        allCsvRows.push(modifiedCsvRow);\n        \n    } else {\n        \n        // Construct CSV row for other lines\n        const { groupID, teamLeader, dateJoined, dateEnded, lifetime, currentCardinality, minCardinality, maxCardinality, averageCardinality, nChangeCardinality } = oldLines[i];\n\n        const csvRow = `${groupID},${oldLines[i].teamLeader},\"${oldLines[i].listOfPeople}\",\"${oldLines[i].nationality}\",\"${oldLines[i].age}\",\"${dateJoined}\",\"${dateEnded}\",${lifetime},${currentCardinality},${minCardinality},${maxCardinality},${averageCardinality},${nChangeCardinality}`;\n        \n        allCsvRows.push(csvRow);\n    }\n}\n\n// Pass all CSV rows to the next node\nmsg.payload = allCsvRows.join('\\n');\n\nreturn [null, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 620,
        "y": 660,
        "wires": [
            [
                "83943cad.65dd5"
            ],
            [
                "2ccea458.e8d29c",
                "7606e879.8532d8"
            ]
        ]
    },
    {
        "id": "2ccea458.e8d29c",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printNewCsvLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "7606e879.8532d8",
        "type": "file",
        "z": "9206241c.eddcf8",
        "name": "writeToCsv",
        "filename": "/data/output.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 890,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "f1313cff.c383e",
        "type": "mqtt in",
        "z": "9206241c.eddcf8",
        "name": "Project1/changeCardinality",
        "topic": "Project1/changeCardinality",
        "qos": "1",
        "datatype": "auto",
        "broker": "2d49513f.291dfe",
        "x": 270,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "83943cad.65dd5",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printError",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 880,
        "y": 600,
        "wires": []
    },
    {
        "id": "fb1642dc.9e625",
        "type": "mqtt in",
        "z": "9206241c.eddcf8",
        "name": "Project1/newEnvironmentPerson",
        "topic": "Project1/newEnvironmentPerson",
        "qos": "1",
        "datatype": "auto",
        "broker": "2d49513f.291dfe",
        "x": 290,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c639caa3.06e7c8",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "simulateMQTT",
        "func": "// var person = { IP: \"200:54:32\", nationality: \"Italy\", age: 30 };\n// var person = { IP: \"200:85:33\", nationality: \"Argentina\", age: 25 };\n// var person = { IP: \"200:77:90\", nationality: \"Italy\", age: 30 };\nvar person = { IP: \"200:11:85\", nationality: \"Italy\", age: 25 };\n// var person = { IP: \"200:21:75\", nationality: \"Germany\", age: 42 };\n// var person = { IP: \"200:43:32\", nationality: \"US\", age: 20 };\n// var person = { IP: \"200:79:15\", nationality: \"US\", age: 30 };\n\n\nmsg.payload = JSON.stringify(person);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 820,
        "wires": [
            [
                "e0829332.46f66"
            ]
        ]
    },
    {
        "id": "bb32b50c.7f14e8",
        "type": "inject",
        "z": "9206241c.eddcf8",
        "name": "Simulate newEnvironmentPerson",
        "topic": "Project1/newEnvironmentPerson",
        "payload": "Hello World",
        "payloadType": "str",
        "repeat": "36000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 760,
        "wires": [
            [
                "c639caa3.06e7c8",
                "572343ce.870bbc"
            ]
        ]
    },
    {
        "id": "572343ce.870bbc",
        "type": "file in",
        "z": "9206241c.eddcf8",
        "name": "Read Environment",
        "filename": "/data/environment.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 250,
        "y": 860,
        "wires": [
            [
                "ea3778da.c59108"
            ]
        ]
    },
    {
        "id": "ea3778da.c59108",
        "type": "csv",
        "z": "9206241c.eddcf8",
        "name": "read",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "IP,nationality,age",
        "skip": "0",
        "strings": false,
        "x": 410,
        "y": 860,
        "wires": [
            [
                "c0eb1e52.566b7"
            ]
        ]
    },
    {
        "id": "e0829332.46f66",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "convertToJSObject",
        "func": "var inputString = msg.payload;\n\n// Parse the string to convert it to a JavaScript object\nvar parsedObject = JSON.parse(inputString);\n\n// Now, parsedObject contains the JavaScript object\nmsg.payload = parsedObject;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 820,
        "wires": [
            [
                "c0eb1e52.566b7"
            ]
        ]
    },
    {
        "id": "c0eb1e52.566b7",
        "type": "join",
        "z": "9206241c.eddcf8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 630,
        "y": 840,
        "wires": [
            [
                "5c032470.f3daec"
            ]
        ]
    },
    {
        "id": "5c032470.f3daec",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "prepareNewCsvLine",
        "func": "// Extract data from msg.payload\nconst newLine = msg.payload[0];\nconst oldLines = msg.payload[1];\n\nlet matchFound = false;\nlet matchingIndex = -1;\n\n// Iterate over the objects in the second array to find matching IP\nfor (let i = 0; i < oldLines.length; i++) {\n    const groupIdStr = oldLines[i].IP;\n    if (groupIdStr === newLine.IP) {\n        matchingIndex = i;\n        matchFound = true;\n        break;\n    }\n}\n\nif (matchFound) {\n    // IP already in database\n    msg.payload = \"Error: IP already inside database\"\n    return [msg, null];\n}\n\nconst csvRow = `${newLine.IP},\"${newLine.nationality}\",\"${newLine.age}\"`;\n    \nmsg.payload = csvRow;\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 640,
        "y": 960,
        "wires": [
            [
                "def4b8b9.6292c8"
            ],
            [
                "d8d3d9fc.2c25c8",
                "5a87e3bd.5430ec"
            ]
        ]
    },
    {
        "id": "d8d3d9fc.2c25c8",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printNewCsvLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 950,
        "y": 960,
        "wires": []
    },
    {
        "id": "5a87e3bd.5430ec",
        "type": "file",
        "z": "9206241c.eddcf8",
        "name": "writeToCsv",
        "filename": "/data/environment.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 930,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "def4b8b9.6292c8",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printError",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 920,
        "y": 900,
        "wires": []
    },
    {
        "id": "62cf2cf2.4c5824",
        "type": "file in",
        "z": "9206241c.eddcf8",
        "name": "Read Environment",
        "filename": "/data/environment.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "340bf227.84e60e"
            ]
        ]
    },
    {
        "id": "340bf227.84e60e",
        "type": "csv",
        "z": "9206241c.eddcf8",
        "name": "read",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "IP,nationality,age",
        "skip": "0",
        "strings": false,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "9a487c7e.deb57"
            ]
        ]
    },
    {
        "id": "9a487c7e.deb57",
        "type": "join",
        "z": "9206241c.eddcf8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 200,
        "wires": [
            [
                "493c35ea.ffaabc"
            ]
        ]
    },
    {
        "id": "4b76a48f.808cec",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "Error Missing IPs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "9e44d79.c1dab28",
        "type": "file in",
        "z": "9206241c.eddcf8",
        "name": "Read Environment",
        "filename": "/data/environment.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 250,
        "y": 560,
        "wires": [
            [
                "e896cae0.328c98"
            ]
        ]
    },
    {
        "id": "e896cae0.328c98",
        "type": "csv",
        "z": "9206241c.eddcf8",
        "name": "read",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "IP,nationality,age",
        "skip": "0",
        "strings": false,
        "x": 410,
        "y": 560,
        "wires": [
            [
                "d1bf3d7b.c7089"
            ]
        ]
    },
    {
        "id": "e2adb1f3.a7b63",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "Routing",
        "func": "if (msg.payload[0].cardinality < 3) {\n    // Route the message in one direction\n    return [msg, null];\n} else {\n    // Route the message in another direction\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 760,
        "y": 500,
        "wires": [
            [
                "c7b9a21e.e8a92"
            ],
            [
                "d91a9d47.e1642"
            ]
        ]
    },
    {
        "id": "c7b9a21e.e8a92",
        "type": "function",
        "z": "9206241c.eddcf8",
        "name": "addDateEnded",
        "func": "// Extract data from msg.payload\nconst newLine = msg.payload[0];\nconst oldLines = msg.payload[1];\nconst people = msg.payload[2];\n\n// Extract groupID from the newLine object\nconst newGroupID = newLine.groupID;\n\nconst columnHeaders = \"groupID,teamLeader,listOfPeople,nationality,age,dateJoined,dateEnded,lifetime,currentCardinality,minCardinality,maxCardinality,averageCardinality,nChangeCardinality\";\n\n// Initialize an array to store all CSV rows\nconst allCsvRows = [];\nallCsvRows.push(columnHeaders);\n\nlet matchFound = false;\nlet matchingIndex = -1;\n\n// Find the row in the CSV that matches teamLeader with groupID and has dateEnded == null\nfor (let i = 0; i < oldLines.length; i++) {\n    if (oldLines[i].teamLeader === newGroupID && oldLines[i].dateEnded === 'null') {\n        matchingIndex = i;\n        matchFound = true;\n        break;\n    }\n}\n\nif (!matchFound) {\n    // No matching groupID found\n    msg.payload = \"Error: No matching team leader found\"\n    return [msg, null];\n}\n\n\nfor (let i = 0; i < oldLines.length; i++) {\n    \n    // Update csv line\n    if (i === matchingIndex) {\n\n        const { teamLeader, members, cardinality } = newLine;\n        const { groupID, listOfPeople, nationality, age, dateJoined, dateEnded, lifetime, currentCardinality, minCardinality, maxCardinality, averageCardinality, nChangeCardinality } = oldLines[i];\n\n\n        let newMinCardinality = 2\n        let newMaxCardinality = parseInt(maxCardinality);\n\n        if (parseInt(cardinality) < newMinCardinality || isNaN(newMinCardinality)) {\n            newMinCardinality = parseInt(cardinality);\n        }\n        if (parseInt(cardinality) > newMaxCardinality || isNaN(newMaxCardinality)) {\n            newMaxCardinality = parseInt(cardinality);\n        }\n\n        const newNChangeCardinality = parseInt(nChangeCardinality) + 1;\n        const newAverageCardinality = (((parseFloat(averageCardinality) * parseInt(nChangeCardinality)) + parseInt(cardinality)) / newNChangeCardinality).toFixed(2);\n        const newCurrentCardinality = 0;\n\n        const timestampDate = new Date();\n        const newDateEnded = timestampDate.toISOString();\n        const dateJoinedDate = new Date(dateJoined);\n        const differenceInSeconds = (timestampDate - dateJoinedDate) / 1000;\n        const lifetimeSeconds = parseFloat(lifetime) + differenceInSeconds;\n\n        // Construct the modified CSV row\n        const modifiedCsvRow = `${groupID},${oldLines[i].teamLeader},\"${listOfPeople}\",\"${nationality}\",\"${age}\",\"${dateJoined}\",\"${newDateEnded}\",${lifetimeSeconds},${newCurrentCardinality},${newMinCardinality},${newMaxCardinality},${newAverageCardinality},${newNChangeCardinality}`;\n        \n        // Push the modified CSV row to the array\n        allCsvRows.push(modifiedCsvRow);\n        \n    } else {\n        \n        // Construct CSV row for other lines\n        const { groupID, teamLeader, dateJoined, dateEnded, lifetime, currentCardinality, minCardinality, maxCardinality, averageCardinality, nChangeCardinality } = oldLines[i];\n\n        const csvRow = `${groupID},${oldLines[i].teamLeader},\"${oldLines[i].listOfPeople}\",\"${oldLines[i].nationality}\",\"${oldLines[i].age}\",\"${dateJoined}\",\"${dateEnded}\",${lifetime},${currentCardinality},${minCardinality},${maxCardinality},${averageCardinality},${nChangeCardinality}`;\n        \n        allCsvRows.push(csvRow);\n    }\n}\n\n// Pass all CSV rows to the next node\nmsg.payload = allCsvRows.join('\\n');\n\nreturn [null, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "afbf71ad.0f9f4"
            ],
            [
                "25b19be1.136044",
                "84ac6794.7dae38"
            ]
        ]
    },
    {
        "id": "afbf71ad.0f9f4",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printError",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "25b19be1.136044",
        "type": "debug",
        "z": "9206241c.eddcf8",
        "name": "printNewCsvLine",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1210,
        "y": 620,
        "wires": []
    },
    {
        "id": "84ac6794.7dae38",
        "type": "file",
        "z": "9206241c.eddcf8",
        "name": "writeToCsv",
        "filename": "/data/output.csv",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1190,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6d1b8caa.ca8ce4",
        "type": "file in",
        "z": "9206241c.eddcf8",
        "name": "Read Groups",
        "filename": "/data/output.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "723e0f8f.8194d"
            ]
        ]
    },
    {
        "id": "723e0f8f.8194d",
        "type": "csv",
        "z": "9206241c.eddcf8",
        "name": "read",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "groupID,teamLeader,listOfPeople,nationality,age,dateJoined,dateEnded,lifetime,currentCardinality,minCardinality,maxCardinality,averageCardinality,nChangeCardinality",
        "skip": "0",
        "strings": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "9a487c7e.deb57"
            ]
        ]
    }
]